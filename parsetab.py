
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightINTERROGATIONleftORleftANDleftEQDIFFleftLTLEGTGEleftPLUSMINUSleftMULTIPLYDIVIDEAND ARROW ASSIGN BOOL BREAK COLON COMMA CONST_NUMBER CONST_STRING DIFF DIVIDE DIVIDE_EQ ELSE EQ FALSE FOR FUNC GE GT ID IF INTERROGATION LBRACE LCOLC LE LPAREN LT MINUS MINUS_EQ MOD MULTIPLY MULTIPLY_EQ NOT NUMBER OR PLUS PLUS_EQ RBRACE RCOLC READ RETURN RPAREN SEMICOLON STRING TRUE WHILE WRITE program : decSeq\n    dec : varDec\n        | FUNC ID LPAREN paramList RPAREN ARROW LBRACE block RBRACE\n        | FUNC type ID LPAREN paramList RPAREN ARROW LBRACE block RBRACE\n    varDec : type varSpecSeq SEMICOLON\n    varSpec : ID\n            | ID ASSIGN literal\n            | ID LCOLC NUMBER RCOLC\n            | ID LCOLC NUMBER RCOLC ASSIGN LBRACE literalSeq RBRACE\n    \n    type : NUMBER\n         | STRING\n         | BOOL\n    \n    param : type ID\n          | type ID LCOLC RCOLC\n     block : varDecList stmtList\n      stmt : ifStmt\n           | whileStmt\n           | forStmt\n           | breakStmt\n           | returnStmt\n           | readStmt\n           | writeStmt\n           | assign SEMICOLON\n           | subCall SEMICOLON\n    \n    ifStmt : IF LPAREN exp RPAREN ARROW LBRACE block RBRACE\n           | IF LPAREN exp RPAREN ARROW RBRACE block RBRACE ELSE LBRACE block RBRACE\n     whileStmt : WHILE LPAREN exp RPAREN ARROW LBRACE block RBRACE forStmt : FOR LPAREN assign SEMICOLON exp SEMICOLON assign RPAREN ARROW LBRACE block RBRACEbreakStmt : BREAK SEMICOLONreadStmt : READ var SEMICOLONwriteStmt : WRITE expList SEMICOLON\n    returnStmt : RETURN SEMICOLON\n               | RETURN exp SEMICOLON\n    subCall : ID LPAREN expList RPAREN\n    assign : var ASSIGN exp\n           | var PLUS_EQ exp\n           | var MINUS_EQ exp\n           | var MULTIPLY_EQ exp\n           | var DIVIDE_EQ exp\n           | var MOD exp\n    \n    var : ID\n        | ID LCOLC exp RCOLC\n    \n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULTIPLY exp\n        | exp DIVIDE exp\n        | exp MOD exp\n        | exp EQ exp\n        | exp DIFF exp\n        | exp LE exp\n        | exp GE exp\n        | exp GT exp\n        | exp LT exp\n        | exp AND exp\n        | exp OR exp\n        | NOT exp\n        | MINUS exp\n        | exp INTERROGATION exp COLON exp\n        | subCall\n        | var\n        | literal\n        | LPAREN exp RPAREN\n        | param\n    \n    literal : CONST_NUMBER\n            | CONST_STRING\n            | TRUE\n            | FALSE\n    \n    paramList : paramSeq\n              | empty\n    \n    paramSeq : param COMMA paramSeq\n             | param\n    \n    varDecList : varDec varDecList\n               | empty\n    \n    varSpecSeq : varSpec COMMA varSpecSeq\n               | varSpec\n    \n    expList : expSeq\n            | empty\n    \n    literalSeq : literal COMMA literalSeq\n               | literal\n    \n    stmtList : stmt stmtList\n             | empty\n    \n    decSeq : dec decSeq\n           | dec\n    \n    expSeq : exp COMMA expSeq\n           | exp\n     empty : '
    
_lr_action_items = {'FUNC':([0,3,4,18,56,112,],[5,5,-2,-5,-3,-4,]),'NUMBER':([0,3,4,5,16,18,21,27,36,45,51,53,56,73,76,85,86,91,92,96,100,101,102,103,104,105,110,111,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,171,172,173,186,187,],[7,7,-2,7,7,-5,34,7,7,7,7,7,-3,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'STRING':([0,3,4,5,16,18,27,36,45,51,53,56,73,76,85,86,91,92,96,100,101,102,103,104,105,110,111,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,171,172,173,186,187,],[8,8,-2,8,8,-5,8,8,8,8,8,-3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,-4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'BOOL':([0,3,4,5,16,18,27,36,45,51,53,56,73,76,85,86,91,92,96,100,101,102,103,104,105,110,111,112,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,171,172,173,186,187,],[9,9,-2,9,9,-5,9,9,9,9,9,-3,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-4,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'$end':([1,2,3,4,10,18,56,112,],[0,-1,-83,-2,-82,-5,-3,-4,]),'ID':([5,6,7,8,9,12,18,19,26,45,50,51,52,53,58,60,61,62,63,64,65,66,73,74,76,78,83,84,85,86,87,88,89,91,92,96,100,101,102,103,104,105,110,111,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,135,142,143,148,170,171,172,173,174,180,182,186,187,190,191,],[11,15,-10,-11,-12,17,-5,15,37,-86,77,-86,-73,-86,77,-16,-17,-18,-19,-20,-21,-22,77,99,77,-72,-23,-24,77,77,99,-29,-32,77,77,77,77,77,77,77,77,77,77,77,-33,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-30,-31,77,77,77,-86,-86,-86,99,-25,-27,-86,-86,-26,-28,]),'LPAREN':([11,17,69,70,71,73,76,77,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[16,27,85,86,87,96,96,110,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'SEMICOLON':([13,14,15,28,29,30,31,32,33,37,39,46,67,68,72,73,76,77,80,90,93,94,95,97,98,99,106,107,108,109,116,132,133,136,137,138,139,140,141,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,169,175,],[18,-75,-6,-74,-7,-64,-65,-66,-67,-13,-8,-14,83,84,88,89,-86,-41,-9,117,-59,-60,-61,-63,135,-41,142,-76,-77,-85,148,-57,-56,-35,-36,-37,-38,-39,-40,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-62,-84,-34,-42,174,-58,]),'COMMA':([14,15,25,29,30,31,32,33,37,39,46,55,77,80,93,94,95,97,109,132,133,149,150,151,152,153,154,155,156,157,158,159,160,161,163,165,166,175,],[19,-6,36,-7,-64,-65,-66,-67,-13,-8,-14,81,-41,-9,-59,-60,-61,-63,143,-57,-56,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-62,-34,-42,-58,]),'ASSIGN':([15,39,75,77,99,166,],[20,44,100,-41,-41,-42,]),'LCOLC':([15,37,77,99,],[21,42,111,111,]),'RPAREN':([16,22,23,24,25,27,30,31,32,33,37,38,41,46,77,93,94,95,97,107,108,109,110,114,115,132,133,134,136,137,138,139,140,141,144,149,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,175,179,],[-86,35,-68,-69,-71,-86,-64,-65,-66,-67,-13,43,-70,-14,-41,-59,-60,-61,-63,-76,-77,-85,-86,146,147,-57,-56,163,-35,-36,-37,-38,-39,-40,165,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-62,-84,-34,-42,-58,183,]),'IF':([18,45,50,51,52,53,58,60,61,62,63,64,65,66,78,83,84,88,89,117,135,142,171,172,173,180,182,186,187,190,191,],[-5,-86,69,-86,-73,-86,69,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-86,-86,-86,-25,-27,-86,-86,-26,-28,]),'WHILE':([18,45,50,51,52,53,58,60,61,62,63,64,65,66,78,83,84,88,89,117,135,142,171,172,173,180,182,186,187,190,191,],[-5,-86,70,-86,-73,-86,70,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-86,-86,-86,-25,-27,-86,-86,-26,-28,]),'FOR':([18,45,50,51,52,53,58,60,61,62,63,64,65,66,78,83,84,88,89,117,135,142,171,172,173,180,182,186,187,190,191,],[-5,-86,71,-86,-73,-86,71,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-86,-86,-86,-25,-27,-86,-86,-26,-28,]),'BREAK':([18,45,50,51,52,53,58,60,61,62,63,64,65,66,78,83,84,88,89,117,135,142,171,172,173,180,182,186,187,190,191,],[-5,-86,72,-86,-73,-86,72,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-86,-86,-86,-25,-27,-86,-86,-26,-28,]),'RETURN':([18,45,50,51,52,53,58,60,61,62,63,64,65,66,78,83,84,88,89,117,135,142,171,172,173,180,182,186,187,190,191,],[-5,-86,73,-86,-73,-86,73,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-86,-86,-86,-25,-27,-86,-86,-26,-28,]),'READ':([18,45,50,51,52,53,58,60,61,62,63,64,65,66,78,83,84,88,89,117,135,142,171,172,173,180,182,186,187,190,191,],[-5,-86,74,-86,-73,-86,74,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-86,-86,-86,-25,-27,-86,-86,-26,-28,]),'WRITE':([18,45,50,51,52,53,58,60,61,62,63,64,65,66,78,83,84,88,89,117,135,142,171,172,173,180,182,186,187,190,191,],[-5,-86,76,-86,-73,-86,76,-16,-17,-18,-19,-20,-21,-22,-72,-23,-24,-29,-32,-33,-30,-31,-86,-86,-86,-25,-27,-86,-86,-26,-28,]),'RBRACE':([18,30,31,32,33,45,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,78,79,82,83,84,88,89,113,117,135,142,167,171,172,173,176,177,178,180,182,186,187,188,189,190,191,],[-5,-64,-65,-66,-67,-86,56,-86,-86,-73,-86,80,-79,-15,-86,-81,-16,-17,-18,-19,-20,-21,-22,-72,112,-80,-23,-24,-29,-32,-78,-33,-30,-31,172,-86,-86,-86,180,181,182,-25,-27,-86,-86,190,191,-26,-28,]),'CONST_NUMBER':([20,48,73,76,81,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'CONST_STRING':([20,48,73,76,81,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'TRUE':([20,48,73,76,81,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FALSE':([20,48,73,76,81,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'PLUS':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,118,-59,-60,-61,-63,118,118,118,-57,118,118,118,118,118,118,118,118,118,-43,-44,-45,-46,118,118,118,118,118,118,118,118,118,118,-62,-34,-42,118,118,]),'MINUS':([30,31,32,33,37,46,73,76,77,85,86,90,91,92,93,94,95,96,97,100,101,102,103,104,105,109,110,111,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,137,138,139,140,141,143,145,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,170,175,],[-64,-65,-66,-67,-13,-14,91,91,-41,91,91,119,91,91,-59,-60,-61,91,-63,91,91,91,91,91,91,119,91,91,119,119,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-57,119,119,119,119,119,119,119,119,91,119,91,-43,-44,-45,-46,119,119,119,119,119,119,119,119,119,119,-62,-34,-42,119,91,119,]),'MULTIPLY':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,120,-59,-60,-61,-63,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-45,-46,120,120,120,120,120,120,120,120,120,120,-62,-34,-42,120,120,]),'DIVIDE':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,121,-59,-60,-61,-63,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-45,-46,121,121,121,121,121,121,121,121,121,121,-62,-34,-42,121,121,]),'MOD':([30,31,32,33,37,46,75,77,90,93,94,95,97,99,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,105,-41,122,-59,-60,-61,-63,-41,122,122,122,-57,122,122,122,122,122,122,122,122,122,-43,-44,-45,-46,122,-48,-49,-50,-51,-52,-53,-54,-55,122,-62,-34,-42,122,122,]),'EQ':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,123,-59,-60,-61,-63,123,123,123,-57,123,123,123,123,123,123,123,123,123,-43,-44,-45,-46,123,-48,-49,-50,-51,-52,-53,123,123,123,-62,-34,-42,123,123,]),'DIFF':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,124,-59,-60,-61,-63,124,124,124,-57,124,124,124,124,124,124,124,124,124,-43,-44,-45,-46,124,-48,-49,-50,-51,-52,-53,124,124,124,-62,-34,-42,124,124,]),'LE':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,125,-59,-60,-61,-63,125,125,125,-57,125,125,125,125,125,125,125,125,125,-43,-44,-45,-46,125,125,125,-50,-51,-52,-53,125,125,125,-62,-34,-42,125,125,]),'GE':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,126,-59,-60,-61,-63,126,126,126,-57,126,126,126,126,126,126,126,126,126,-43,-44,-45,-46,126,126,126,-50,-51,-52,-53,126,126,126,-62,-34,-42,126,126,]),'GT':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,127,-59,-60,-61,-63,127,127,127,-57,127,127,127,127,127,127,127,127,127,-43,-44,-45,-46,127,127,127,-50,-51,-52,-53,127,127,127,-62,-34,-42,127,127,]),'LT':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,128,-59,-60,-61,-63,128,128,128,-57,128,128,128,128,128,128,128,128,128,-43,-44,-45,-46,128,128,128,-50,-51,-52,-53,128,128,128,-62,-34,-42,128,128,]),'AND':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,129,-59,-60,-61,-63,129,129,129,-57,129,129,129,129,129,129,129,129,129,-43,-44,-45,-46,129,-48,-49,-50,-51,-52,-53,-54,129,129,-62,-34,-42,129,129,]),'OR':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,130,-59,-60,-61,-63,130,130,130,-57,130,130,130,130,130,130,130,130,130,-43,-44,-45,-46,130,-48,-49,-50,-51,-52,-53,-54,-55,130,-62,-34,-42,130,130,]),'INTERROGATION':([30,31,32,33,37,46,77,90,93,94,95,97,109,114,115,132,133,134,136,137,138,139,140,141,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,169,175,],[-64,-65,-66,-67,-13,-14,-41,131,-59,-60,-61,-63,131,131,131,-57,131,131,131,131,131,131,131,131,131,-43,-44,-45,-46,131,-48,-49,-50,-51,-52,-53,-54,-55,131,-62,-34,-42,131,131,]),'RCOLC':([30,31,32,33,34,37,42,46,77,93,94,95,97,132,133,145,149,150,151,152,153,154,155,156,157,158,159,160,161,163,165,166,175,],[-64,-65,-66,-67,39,-13,46,-14,-41,-59,-60,-61,-63,-57,-56,166,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-62,-34,-42,-58,]),'COLON':([30,31,32,33,37,46,77,93,94,95,97,132,133,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,175,],[-64,-65,-66,-67,-13,-14,-41,-59,-60,-61,-63,-57,-56,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,170,-62,-34,-42,-58,]),'ARROW':([35,43,146,147,183,],[40,47,167,168,185,]),'LBRACE':([40,44,47,167,168,184,185,],[45,48,53,171,173,186,187,]),'NOT':([73,76,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'PLUS_EQ':([75,77,99,166,],[101,-41,-41,-42,]),'MINUS_EQ':([75,77,99,166,],[102,-41,-41,-42,]),'MULTIPLY_EQ':([75,77,99,166,],[103,-41,-41,-42,]),'DIVIDE_EQ':([75,77,99,166,],[104,-41,-41,-42,]),'ELSE':([181,],[184,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'decSeq':([0,3,],[2,10,]),'dec':([0,3,],[3,3,]),'varDec':([0,3,45,51,53,171,172,173,186,187,],[4,4,51,51,51,51,51,51,51,51,]),'type':([0,3,5,16,27,36,45,51,53,73,76,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,171,172,173,186,187,],[6,6,12,26,26,26,6,6,6,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,6,6,6,6,6,]),'varSpecSeq':([6,19,],[13,28,]),'varSpec':([6,19,],[14,14,]),'paramList':([16,27,],[22,38,]),'paramSeq':([16,27,36,],[23,23,41,]),'empty':([16,27,45,50,51,53,58,76,110,171,172,173,186,187,],[24,24,52,59,52,52,59,108,108,52,52,52,52,52,]),'param':([16,27,36,73,76,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[25,25,25,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'literal':([20,48,73,76,81,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[29,55,95,95,55,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'block':([45,53,171,172,173,186,187,],[49,79,176,177,178,188,189,]),'varDecList':([45,51,53,171,172,173,186,187,],[50,78,50,50,50,50,50,50,]),'literalSeq':([48,81,],[54,113,]),'stmtList':([50,58,],[57,82,]),'stmt':([50,58,],[58,58,]),'ifStmt':([50,58,],[60,60,]),'whileStmt':([50,58,],[61,61,]),'forStmt':([50,58,],[62,62,]),'breakStmt':([50,58,],[63,63,]),'returnStmt':([50,58,],[64,64,]),'readStmt':([50,58,],[65,65,]),'writeStmt':([50,58,],[66,66,]),'assign':([50,58,87,174,],[67,67,116,179,]),'subCall':([50,58,73,76,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[68,68,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'var':([50,58,73,74,76,85,86,87,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,174,],[75,75,94,98,94,94,94,75,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,75,]),'exp':([73,76,85,86,91,92,96,100,101,102,103,104,105,110,111,118,119,120,121,122,123,124,125,126,127,128,129,130,131,143,148,170,],[90,109,114,115,132,133,134,136,137,138,139,140,141,109,145,149,150,151,152,153,154,155,156,157,158,159,160,161,162,109,169,175,]),'expList':([76,110,],[106,144,]),'expSeq':([76,110,143,],[107,107,164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decSeq','program',1,'p_program','arrow_parser.py',17),
  ('dec -> varDec','dec',1,'p_dec','arrow_parser.py',23),
  ('dec -> FUNC ID LPAREN paramList RPAREN ARROW LBRACE block RBRACE','dec',9,'p_dec','arrow_parser.py',24),
  ('dec -> FUNC type ID LPAREN paramList RPAREN ARROW LBRACE block RBRACE','dec',10,'p_dec','arrow_parser.py',25),
  ('varDec -> type varSpecSeq SEMICOLON','varDec',3,'p_var_dec','arrow_parser.py',36),
  ('varSpec -> ID','varSpec',1,'p_var_spec','arrow_parser.py',42),
  ('varSpec -> ID ASSIGN literal','varSpec',3,'p_var_spec','arrow_parser.py',43),
  ('varSpec -> ID LCOLC NUMBER RCOLC','varSpec',4,'p_var_spec','arrow_parser.py',44),
  ('varSpec -> ID LCOLC NUMBER RCOLC ASSIGN LBRACE literalSeq RBRACE','varSpec',8,'p_var_spec','arrow_parser.py',45),
  ('type -> NUMBER','type',1,'p_type','arrow_parser.py',59),
  ('type -> STRING','type',1,'p_type','arrow_parser.py',60),
  ('type -> BOOL','type',1,'p_type','arrow_parser.py',61),
  ('param -> type ID','param',2,'p_param','arrow_parser.py',68),
  ('param -> type ID LCOLC RCOLC','param',4,'p_param','arrow_parser.py',69),
  ('block -> varDecList stmtList','block',2,'p_block','arrow_parser.py',78),
  ('stmt -> ifStmt','stmt',1,'p_stmt','arrow_parser.py',84),
  ('stmt -> whileStmt','stmt',1,'p_stmt','arrow_parser.py',85),
  ('stmt -> forStmt','stmt',1,'p_stmt','arrow_parser.py',86),
  ('stmt -> breakStmt','stmt',1,'p_stmt','arrow_parser.py',87),
  ('stmt -> returnStmt','stmt',1,'p_stmt','arrow_parser.py',88),
  ('stmt -> readStmt','stmt',1,'p_stmt','arrow_parser.py',89),
  ('stmt -> writeStmt','stmt',1,'p_stmt','arrow_parser.py',90),
  ('stmt -> assign SEMICOLON','stmt',2,'p_stmt','arrow_parser.py',91),
  ('stmt -> subCall SEMICOLON','stmt',2,'p_stmt','arrow_parser.py',92),
  ('ifStmt -> IF LPAREN exp RPAREN ARROW LBRACE block RBRACE','ifStmt',8,'p_if_stmt','arrow_parser.py',99),
  ('ifStmt -> IF LPAREN exp RPAREN ARROW RBRACE block RBRACE ELSE LBRACE block RBRACE','ifStmt',12,'p_if_stmt','arrow_parser.py',100),
  ('whileStmt -> WHILE LPAREN exp RPAREN ARROW LBRACE block RBRACE','whileStmt',8,'p_while_stmt','arrow_parser.py',110),
  ('forStmt -> FOR LPAREN assign SEMICOLON exp SEMICOLON assign RPAREN ARROW LBRACE block RBRACE','forStmt',12,'p_for_stmt','arrow_parser.py',115),
  ('breakStmt -> BREAK SEMICOLON','breakStmt',2,'p_break_stmt','arrow_parser.py',121),
  ('readStmt -> READ var SEMICOLON','readStmt',3,'p_read_stmt','arrow_parser.py',126),
  ('writeStmt -> WRITE expList SEMICOLON','writeStmt',3,'p_write_stmt','arrow_parser.py',131),
  ('returnStmt -> RETURN SEMICOLON','returnStmt',2,'p_return_stmt','arrow_parser.py',137),
  ('returnStmt -> RETURN exp SEMICOLON','returnStmt',3,'p_return_stmt','arrow_parser.py',138),
  ('subCall -> ID LPAREN expList RPAREN','subCall',4,'p_sub_call','arrow_parser.py',147),
  ('assign -> var ASSIGN exp','assign',3,'p_assign','arrow_parser.py',153),
  ('assign -> var PLUS_EQ exp','assign',3,'p_assign','arrow_parser.py',154),
  ('assign -> var MINUS_EQ exp','assign',3,'p_assign','arrow_parser.py',155),
  ('assign -> var MULTIPLY_EQ exp','assign',3,'p_assign','arrow_parser.py',156),
  ('assign -> var DIVIDE_EQ exp','assign',3,'p_assign','arrow_parser.py',157),
  ('assign -> var MOD exp','assign',3,'p_assign','arrow_parser.py',158),
  ('var -> ID','var',1,'p_var','arrow_parser.py',165),
  ('var -> ID LCOLC exp RCOLC','var',4,'p_var','arrow_parser.py',166),
  ('exp -> exp PLUS exp','exp',3,'p_exp','arrow_parser.py',176),
  ('exp -> exp MINUS exp','exp',3,'p_exp','arrow_parser.py',177),
  ('exp -> exp MULTIPLY exp','exp',3,'p_exp','arrow_parser.py',178),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','arrow_parser.py',179),
  ('exp -> exp MOD exp','exp',3,'p_exp','arrow_parser.py',180),
  ('exp -> exp EQ exp','exp',3,'p_exp','arrow_parser.py',181),
  ('exp -> exp DIFF exp','exp',3,'p_exp','arrow_parser.py',182),
  ('exp -> exp LE exp','exp',3,'p_exp','arrow_parser.py',183),
  ('exp -> exp GE exp','exp',3,'p_exp','arrow_parser.py',184),
  ('exp -> exp GT exp','exp',3,'p_exp','arrow_parser.py',185),
  ('exp -> exp LT exp','exp',3,'p_exp','arrow_parser.py',186),
  ('exp -> exp AND exp','exp',3,'p_exp','arrow_parser.py',187),
  ('exp -> exp OR exp','exp',3,'p_exp','arrow_parser.py',188),
  ('exp -> NOT exp','exp',2,'p_exp','arrow_parser.py',189),
  ('exp -> MINUS exp','exp',2,'p_exp','arrow_parser.py',190),
  ('exp -> exp INTERROGATION exp COLON exp','exp',5,'p_exp','arrow_parser.py',191),
  ('exp -> subCall','exp',1,'p_exp','arrow_parser.py',192),
  ('exp -> var','exp',1,'p_exp','arrow_parser.py',193),
  ('exp -> literal','exp',1,'p_exp','arrow_parser.py',194),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp','arrow_parser.py',195),
  ('exp -> param','exp',1,'p_exp','arrow_parser.py',196),
  ('literal -> CONST_NUMBER','literal',1,'p_literal','arrow_parser.py',213),
  ('literal -> CONST_STRING','literal',1,'p_literal','arrow_parser.py',214),
  ('literal -> TRUE','literal',1,'p_literal','arrow_parser.py',215),
  ('literal -> FALSE','literal',1,'p_literal','arrow_parser.py',216),
  ('paramList -> paramSeq','paramList',1,'p_param_list','arrow_parser.py',223),
  ('paramList -> empty','paramList',1,'p_param_list','arrow_parser.py',224),
  ('paramSeq -> param COMMA paramSeq','paramSeq',3,'p_param_seq','arrow_parser.py',231),
  ('paramSeq -> param','paramSeq',1,'p_param_seq','arrow_parser.py',232),
  ('varDecList -> varDec varDecList','varDecList',2,'p_var_dec_list','arrow_parser.py',242),
  ('varDecList -> empty','varDecList',1,'p_var_dec_list','arrow_parser.py',243),
  ('varSpecSeq -> varSpec COMMA varSpecSeq','varSpecSeq',3,'p_var_spec_seq','arrow_parser.py',251),
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_var_spec_seq','arrow_parser.py',252),
  ('expList -> expSeq','expList',1,'p_exp_list','arrow_parser.py',262),
  ('expList -> empty','expList',1,'p_exp_list','arrow_parser.py',263),
  ('literalSeq -> literal COMMA literalSeq','literalSeq',3,'p_literal_seq','arrow_parser.py',271),
  ('literalSeq -> literal','literalSeq',1,'p_literal_seq','arrow_parser.py',272),
  ('stmtList -> stmt stmtList','stmtList',2,'p_stmt_list','arrow_parser.py',282),
  ('stmtList -> empty','stmtList',1,'p_stmt_list','arrow_parser.py',283),
  ('decSeq -> dec decSeq','decSeq',2,'p_dec_seq','arrow_parser.py',291),
  ('decSeq -> dec','decSeq',1,'p_dec_seq','arrow_parser.py',292),
  ('expSeq -> exp COMMA expSeq','expSeq',3,'p_exp_seq','arrow_parser.py',302),
  ('expSeq -> exp','expSeq',1,'p_exp_seq','arrow_parser.py',303),
  ('empty -> <empty>','empty',0,'p_empty','arrow_parser.py',312),
]
